#!/usr/bin/env python3
"""
YouTube Transcript Extractor - Streamlit Dashboard
==================================================

A beautiful web dashboard for extracting YouTube video transcripts with various options.

Features:
- Extract transcripts from YouTube URLs
- Toggle timestamps on/off
- Multiple language support
- Translation capabilities
- Save transcripts as files
- Live preview on dashboard
- Responsive design

Run with: streamlit run streamlit_dashboard.py
"""

import streamlit as st
import re
import os
import io
from datetime import datetime
from urllib.parse import urlparse, parse_qs
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api._errors import (
    TranscriptsDisabled, 
    NoTranscriptFound, 
    VideoUnavailable,
    RequestBlocked,
    IpBlocked,
    NotTranslatable,
    TranslationLanguageNotAvailable
)

# Page configuration
st.set_page_config(
    page_title="YouTube Transcript Extractor",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 1rem 0;
        background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 2rem;
    }
    
    .feature-box {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        border-left: 4px solid #4ecdc4;
    }
    
    .transcript-box {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        max-height: 500px;
        overflow-y: auto;
        font-family: 'Courier New', monospace;
        white-space: pre-wrap;
        line-height: 1.6;
    }
    
    .success-message {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 0.75rem;
        color: #155724;
        margin: 1rem 0;
    }
    
    .error-message {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 0.75rem;
        color: #721c24;
        margin: 1rem 0;
    }
    
    .info-box {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        padding: 0.75rem;
        color: #0c5460;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def extract_video_id(url_or_id):
    """Extract video ID from YouTube URL or return the ID if it's already a video ID."""
    if re.match(r'^[a-zA-Z0-9_-]{11}$', url_or_id):
        return url_or_id
    
    if 'youtu.be/' in url_or_id:
        return url_or_id.split('youtu.be/')[-1].split('?')[0]
    elif 'youtube.com' in url_or_id:
        parsed_url = urlparse(url_or_id)
        if 'watch' in parsed_url.path:
            query_params = parse_qs(parsed_url.query)
            if 'v' in query_params:
                return query_params['v'][0]
        elif 'embed' in parsed_url.path:
            return parsed_url.path.split('/embed/')[-1]
    
    raise ValueError(f"Invalid YouTube URL or video ID: {url_or_id}")

def format_transcript(transcript_data, include_timestamps=True):
    """Format transcript data into readable text."""
    formatted_lines = []
    
    for snippet in transcript_data:
        text = snippet.text.strip()
        if not text:
            continue
            
        if include_timestamps:
            start_time = snippet.start
            minutes = int(start_time // 60)
            seconds = int(start_time % 60)
            time_stamp = f"[{minutes:02d}:{seconds:02d}]"
            formatted_lines.append(f"{time_stamp} {text}")
        else:
            formatted_lines.append(text)
    
    return "\n".join(formatted_lines)

def get_video_info(video_id):
    """Get basic video information for display."""
    return {
        'video_id': video_id,
        'youtube_url': f"https://www.youtube.com/watch?v={video_id}",
        'embed_url': f"https://www.youtube.com/embed/{video_id}"
    }

def create_download_content(transcript_text, video_info, include_timestamps, language, is_translated=False):
    """Create formatted content for download."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    header = f"""YouTube Transcript Extract
{'='*50}
Video ID: {video_info['video_id']}
YouTube URL: {video_info['youtube_url']}
Language: {language}
Timestamps: {'Included' if include_timestamps else 'Excluded'}
{'Translated: Yes' if is_translated else ''}
Extracted on: {timestamp}
{'='*50}

"""
    
    footer = f"""

{'='*50}
Generated by YouTube Transcript Extractor
Total lines: {len(transcript_text.split(chr(10)))}
{'='*50}"""
    
    return header + transcript_text + footer

# Initialize session state
if 'transcript_data' not in st.session_state:
    st.session_state.transcript_data = None
if 'video_info' not in st.session_state:
    st.session_state.video_info = None
if 'available_transcripts' not in st.session_state:
    st.session_state.available_transcripts = None

# Header
st.markdown('<h1 class="main-header">üé¨ YouTube Transcript Extractor</h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">Extract, translate, and download YouTube video transcripts with ease!</p>', unsafe_allow_html=True)

# Sidebar for options
st.sidebar.header("üõ†Ô∏è Options")

# Language options
common_languages = {
    'English': 'en',
    'Spanish': 'es', 
    'French': 'fr',
    'German': 'de',
    'Italian': 'it',
    'Portuguese': 'pt',
    'Russian': 'ru',
    'Japanese': 'ja',
    'Korean': 'ko',
    'Chinese': 'zh',
    'Arabic': 'ar',
    'Hindi': 'hi'
}

# Main content area
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üìù Extract Transcript")
    
    # URL input
    video_url = st.text_input(
        "üîó Enter YouTube URL or Video ID:",
        placeholder="https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        help="Paste any YouTube URL or just the 11-character video ID"
    )
    
    # Options row
    col_opts1, col_opts2, col_opts3 = st.columns(3)
    
    with col_opts1:
        preferred_language = st.selectbox(
            "üåç Preferred Language:",
            options=list(common_languages.keys()),
            index=0,
            help="Primary language to look for"
        )
    
    with col_opts2:
        include_timestamps = st.checkbox(
            "‚è∞ Include Timestamps",
            value=True,
            help="Toggle timestamps in the transcript"
        )
    
    with col_opts3:
        auto_translate = st.checkbox(
            "üîÑ Enable Translation",
            value=False,
            help="Translate transcript to different language"
        )
    
    # Translation options (only show if enabled)
    if auto_translate:
        translate_to = st.selectbox(
            "üåê Translate to:",
            options=list(common_languages.keys()),
            index=1,
            help="Target language for translation"
        )
    
    # Extract button
    if st.button("üöÄ Extract Transcript", type="primary"):
        if video_url.strip():
            try:
                with st.spinner("üîç Extracting transcript..."):
                    # Extract video ID
                    video_id = extract_video_id(video_url.strip())
                    st.session_state.video_info = get_video_info(video_id)
                    
                    # Initialize API
                    api = YouTubeTranscriptApi()
                    
                    # Get available transcripts
                    transcript_list = api.list(video_id)
                    st.session_state.available_transcripts = transcript_list
                    
                    # Get transcript in preferred language
                    language_code = common_languages[preferred_language]
                    
                    if auto_translate:
                        # Get source transcript and translate
                        source_transcript = transcript_list.find_transcript([language_code, 'en'])
                        target_language_code = common_languages[translate_to]
                        translated_transcript = source_transcript.translate(target_language_code)
                        transcript = translated_transcript.fetch()
                        current_language = translate_to
                        is_translated = True
                    else:
                        # Get direct transcript
                        transcript = api.fetch(video_id, languages=[language_code, 'en'])
                        current_language = transcript.language
                        is_translated = False
                    
                    st.session_state.transcript_data = {
                        'transcript': transcript,
                        'language': current_language,
                        'is_translated': is_translated,
                        'target_language': translate_to if auto_translate else None
                    }
                    
                    st.success(f"‚úÖ Transcript extracted successfully! Language: {current_language}")
                    
            except (TranscriptsDisabled, NoTranscriptFound) as e:
                st.error(f"‚ùå No transcript available: {str(e)}")
            except VideoUnavailable as e:
                st.error(f"‚ùå Video unavailable: {str(e)}")
            except (RequestBlocked, IpBlocked) as e:
                st.error(f"‚ùå Request blocked: {str(e)}")
                st.info("üí° Tip: Try again later or use a VPN")
            except (NotTranslatable, TranslationLanguageNotAvailable) as e:
                st.error(f"‚ùå Translation error: {str(e)}")
            except Exception as e:
                st.error(f"‚ùå Error: {str(e)}")
        else:
            st.warning("‚ö†Ô∏è Please enter a YouTube URL or video ID")

with col2:
    st.header("‚ÑπÔ∏è Video Info")
    
    if st.session_state.video_info:
        video_info = st.session_state.video_info
        
        st.markdown(f"""
        <div class="info-box">
        <strong>üìπ Video ID:</strong> {video_info['video_id']}<br>
        <strong>üîó YouTube URL:</strong> <a href="{video_info['youtube_url']}" target="_blank">Open Video</a>
        </div>
        """, unsafe_allow_html=True)
        
        # Embed video
        st.video(video_info['youtube_url'])
    else:
        st.info("Enter a YouTube URL above to see video information")

# Transcript display and download section
if st.session_state.transcript_data:
    st.header("üìÑ Transcript")
    
    transcript_info = st.session_state.transcript_data
    transcript = transcript_info['transcript']
    
    # Display options
    col_display1, col_display2 = st.columns(2)
    
    with col_display1:
        show_timestamps = st.radio(
            "üëÅÔ∏è Display Format:",
            options=["With Timestamps", "Without Timestamps"],
            index=0 if include_timestamps else 1,
            horizontal=True
        )
    
    with col_display2:
        st.metric("üìä Total Snippets", len(transcript))
    
    # Format transcript for display
    display_with_timestamps = show_timestamps == "With Timestamps"
    formatted_transcript = format_transcript(transcript, display_with_timestamps)
    
    # Display transcript
    st.markdown("### üìù Transcript Content")
    st.markdown(f'<div class="transcript-box">{formatted_transcript}</div>', unsafe_allow_html=True)
    
    # Download section
    st.header("üíæ Download Options")
    
    col_dl1, col_dl2, col_dl3 = st.columns(3)
    
    with col_dl1:
        # With timestamps
        download_content_with_ts = create_download_content(
            format_transcript(transcript, True),
            st.session_state.video_info,
            True,
            transcript_info['language'],
            transcript_info['is_translated']
        )
        
        st.download_button(
            label="üì• Download with Timestamps",
            data=download_content_with_ts,
            file_name=f"transcript_{st.session_state.video_info['video_id']}_timestamps.txt",
            mime="text/plain",
            help="Download transcript with timestamps"
        )
    
    with col_dl2:
        # Without timestamps
        download_content_no_ts = create_download_content(
            format_transcript(transcript, False),
            st.session_state.video_info,
            False,
            transcript_info['language'],
            transcript_info['is_translated']
        )
        
        st.download_button(
            label="üìÑ Download without Timestamps",
            data=download_content_no_ts,
            file_name=f"transcript_{st.session_state.video_info['video_id']}_no_timestamps.txt",
            mime="text/plain",
            help="Download clean transcript text"
        )
    
    with col_dl3:
        # Raw JSON format
        import json
        raw_data = [
            {
                'text': snippet.text,
                'start': snippet.start,
                'duration': snippet.duration
            }
            for snippet in transcript
        ]
        
        json_content = json.dumps(raw_data, indent=2, ensure_ascii=False)
        
        st.download_button(
            label="üìä Download as JSON",
            data=json_content,
            file_name=f"transcript_{st.session_state.video_info['video_id']}.json",
            mime="application/json",
            help="Download raw transcript data as JSON"
        )

# Available transcripts section
if st.session_state.available_transcripts:
    with st.expander("üìã Available Transcripts for this Video"):
        st.markdown("### üåç All Available Languages")
        
        for transcript in st.session_state.available_transcripts:
            col_lang1, col_lang2, col_lang3, col_lang4 = st.columns(4)
            
            with col_lang1:
                st.write(f"**{transcript.language}**")
            with col_lang2:
                st.write(f"`{transcript.language_code}`")
            with col_lang3:
                st.write("ü§ñ Auto" if transcript.is_generated else "‚úçÔ∏è Manual")
            with col_lang4:
                if transcript.is_translatable:
                    st.write(f"üîÑ {len(transcript.translation_languages)} translations")
                else:
                    st.write("‚ùå Not translatable")

# Sidebar additional info
st.sidebar.markdown("---")
st.sidebar.header("üìö Quick Guide")

st.sidebar.markdown("""
<div class="feature-box">
<h4>üöÄ How to Use:</h4>
1. Paste YouTube URL above<br>
2. Select language & options<br>
3. Click "Extract Transcript"<br>
4. View & download results
</div>
""", unsafe_allow_html=True)

st.sidebar.markdown("""
<div class="feature-box">
<h4>‚ú® Features:</h4>
‚Ä¢ Live transcript preview<br>
‚Ä¢ Toggle timestamps on/off<br>
‚Ä¢ Multiple language support<br>
‚Ä¢ Translation capabilities<br>
‚Ä¢ Multiple download formats<br>
‚Ä¢ Video embedding
</div>
""", unsafe_allow_html=True)

st.sidebar.markdown("---")
st.sidebar.markdown("### üîß System Info")
st.sidebar.info(f"üïí Server Time: {datetime.now().strftime('%H:%M:%S')}")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 2rem 0;">
    <p>üé¨ <strong>YouTube Transcript Extractor</strong> - Built with ‚ù§Ô∏è using Streamlit</p>
    <p>üìñ Based on the <a href="https://github.com/jdepoix/youtube-transcript-api" target="_blank">youtube-transcript-api</a> library</p>
</div>
""", unsafe_allow_html=True)

# Auto-refresh option in sidebar
st.sidebar.markdown("---")
if st.sidebar.button("üîÑ Clear All Data"):
    st.session_state.transcript_data = None
    st.session_state.video_info = None
    st.session_state.available_transcripts = None
    st.rerun()

# Display current session info in sidebar
if st.session_state.transcript_data or st.session_state.video_info:
    st.sidebar.markdown("### üìä Current Session")
    if st.session_state.video_info:
        st.sidebar.success(f"üìπ Video: {st.session_state.video_info['video_id']}")
    if st.session_state.transcript_data:
        st.sidebar.success(f"üåç Language: {st.session_state.transcript_data['language']}")
        st.sidebar.success(f"üìù Snippets: {len(st.session_state.transcript_data['transcript'])}")
